/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.medicaid.app.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.medicaid.app.model.Facility;
import com.medicaid.app.model.FacilityModel;
import com.medicaid.app.model.FacilitySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Facility service. Represents a row in the &quot;Medicaid_Facility&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FacilityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FacilityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FacilityImpl
 * @generated
 */
@JSON(strict = true)
public class FacilityModelImpl
	extends BaseModelImpl<Facility> implements FacilityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a facility model instance should use the <code>Facility</code> interface instead.
	 */
	public static final String TABLE_NAME = "Medicaid_Facility";

	public static final Object[][] TABLE_COLUMNS = {
		{"facilityId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"address", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"zipcode", Types.VARCHAR},
		{"phoneNumber", Types.BIGINT}, {"faxNumber", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"pointOfContact", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"createdBy", Types.VARCHAR},
		{"modifiedDate", Types.TIMESTAMP}, {"modifiedBy", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("facilityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipcode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("faxNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pointOfContact", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Medicaid_Facility (facilityId LONG not null primary key,name VARCHAR(75) null,address VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,zipcode VARCHAR(75) null,phoneNumber LONG,faxNumber VARCHAR(75) null,email VARCHAR(75) null,pointOfContact VARCHAR(75) null,createDate DATE null,createdBy VARCHAR(75) null,modifiedDate DATE null,modifiedBy VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Medicaid_Facility";

	public static final String ORDER_BY_JPQL =
		" ORDER BY facility.facilityId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Medicaid_Facility.facilityId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Facility toModel(FacilitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Facility model = new FacilityImpl();

		model.setFacilityId(soapModel.getFacilityId());
		model.setName(soapModel.getName());
		model.setAddress(soapModel.getAddress());
		model.setCity(soapModel.getCity());
		model.setState(soapModel.getState());
		model.setZipcode(soapModel.getZipcode());
		model.setPhoneNumber(soapModel.getPhoneNumber());
		model.setFaxNumber(soapModel.getFaxNumber());
		model.setEmail(soapModel.getEmail());
		model.setPointOfContact(soapModel.getPointOfContact());
		model.setCreateDate(soapModel.getCreateDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Facility> toModels(FacilitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Facility> models = new ArrayList<Facility>(soapModels.length);

		for (FacilitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public FacilityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _facilityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFacilityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _facilityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Facility.class;
	}

	@Override
	public String getModelClassName() {
		return Facility.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Facility, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Facility, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Facility, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Facility)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Facility, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Facility, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Facility)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Facility, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Facility, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Facility>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Facility.class.getClassLoader(), Facility.class,
			ModelWrapper.class);

		try {
			Constructor<Facility> constructor =
				(Constructor<Facility>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Facility, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Facility, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Facility, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Facility, Object>>();
		Map<String, BiConsumer<Facility, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Facility, ?>>();

		attributeGetterFunctions.put("facilityId", Facility::getFacilityId);
		attributeSetterBiConsumers.put(
			"facilityId", (BiConsumer<Facility, Long>)Facility::setFacilityId);
		attributeGetterFunctions.put("name", Facility::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Facility, String>)Facility::setName);
		attributeGetterFunctions.put("address", Facility::getAddress);
		attributeSetterBiConsumers.put(
			"address", (BiConsumer<Facility, String>)Facility::setAddress);
		attributeGetterFunctions.put("city", Facility::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Facility, String>)Facility::setCity);
		attributeGetterFunctions.put("state", Facility::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<Facility, String>)Facility::setState);
		attributeGetterFunctions.put("zipcode", Facility::getZipcode);
		attributeSetterBiConsumers.put(
			"zipcode", (BiConsumer<Facility, String>)Facility::setZipcode);
		attributeGetterFunctions.put("phoneNumber", Facility::getPhoneNumber);
		attributeSetterBiConsumers.put(
			"phoneNumber",
			(BiConsumer<Facility, Long>)Facility::setPhoneNumber);
		attributeGetterFunctions.put("faxNumber", Facility::getFaxNumber);
		attributeSetterBiConsumers.put(
			"faxNumber", (BiConsumer<Facility, String>)Facility::setFaxNumber);
		attributeGetterFunctions.put("email", Facility::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Facility, String>)Facility::setEmail);
		attributeGetterFunctions.put(
			"pointOfContact", Facility::getPointOfContact);
		attributeSetterBiConsumers.put(
			"pointOfContact",
			(BiConsumer<Facility, String>)Facility::setPointOfContact);
		attributeGetterFunctions.put("createDate", Facility::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Facility, Date>)Facility::setCreateDate);
		attributeGetterFunctions.put("createdBy", Facility::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy", (BiConsumer<Facility, String>)Facility::setCreatedBy);
		attributeGetterFunctions.put("modifiedDate", Facility::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Facility, Date>)Facility::setModifiedDate);
		attributeGetterFunctions.put("modifiedBy", Facility::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<Facility, String>)Facility::setModifiedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getFacilityId() {
		return _facilityId;
	}

	@Override
	public void setFacilityId(long facilityId) {
		_facilityId = facilityId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@JSON
	@Override
	public String getZipcode() {
		if (_zipcode == null) {
			return "";
		}
		else {
			return _zipcode;
		}
	}

	@Override
	public void setZipcode(String zipcode) {
		_zipcode = zipcode;
	}

	@JSON
	@Override
	public long getPhoneNumber() {
		return _phoneNumber;
	}

	@Override
	public void setPhoneNumber(long phoneNumber) {
		_phoneNumber = phoneNumber;
	}

	@JSON
	@Override
	public String getFaxNumber() {
		if (_faxNumber == null) {
			return "";
		}
		else {
			return _faxNumber;
		}
	}

	@Override
	public void setFaxNumber(String faxNumber) {
		_faxNumber = faxNumber;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public String getPointOfContact() {
		if (_pointOfContact == null) {
			return "";
		}
		else {
			return _pointOfContact;
		}
	}

	@Override
	public void setPointOfContact(String pointOfContact) {
		_pointOfContact = pointOfContact;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return "";
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Facility.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Facility toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Facility>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FacilityImpl facilityImpl = new FacilityImpl();

		facilityImpl.setFacilityId(getFacilityId());
		facilityImpl.setName(getName());
		facilityImpl.setAddress(getAddress());
		facilityImpl.setCity(getCity());
		facilityImpl.setState(getState());
		facilityImpl.setZipcode(getZipcode());
		facilityImpl.setPhoneNumber(getPhoneNumber());
		facilityImpl.setFaxNumber(getFaxNumber());
		facilityImpl.setEmail(getEmail());
		facilityImpl.setPointOfContact(getPointOfContact());
		facilityImpl.setCreateDate(getCreateDate());
		facilityImpl.setCreatedBy(getCreatedBy());
		facilityImpl.setModifiedDate(getModifiedDate());
		facilityImpl.setModifiedBy(getModifiedBy());

		facilityImpl.resetOriginalValues();

		return facilityImpl;
	}

	@Override
	public int compareTo(Facility facility) {
		long primaryKey = facility.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Facility)) {
			return false;
		}

		Facility facility = (Facility)obj;

		long primaryKey = facility.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		FacilityModelImpl facilityModelImpl = this;

		facilityModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<Facility> toCacheModel() {
		FacilityCacheModel facilityCacheModel = new FacilityCacheModel();

		facilityCacheModel.facilityId = getFacilityId();

		facilityCacheModel.name = getName();

		String name = facilityCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			facilityCacheModel.name = null;
		}

		facilityCacheModel.address = getAddress();

		String address = facilityCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			facilityCacheModel.address = null;
		}

		facilityCacheModel.city = getCity();

		String city = facilityCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			facilityCacheModel.city = null;
		}

		facilityCacheModel.state = getState();

		String state = facilityCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			facilityCacheModel.state = null;
		}

		facilityCacheModel.zipcode = getZipcode();

		String zipcode = facilityCacheModel.zipcode;

		if ((zipcode != null) && (zipcode.length() == 0)) {
			facilityCacheModel.zipcode = null;
		}

		facilityCacheModel.phoneNumber = getPhoneNumber();

		facilityCacheModel.faxNumber = getFaxNumber();

		String faxNumber = facilityCacheModel.faxNumber;

		if ((faxNumber != null) && (faxNumber.length() == 0)) {
			facilityCacheModel.faxNumber = null;
		}

		facilityCacheModel.email = getEmail();

		String email = facilityCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			facilityCacheModel.email = null;
		}

		facilityCacheModel.pointOfContact = getPointOfContact();

		String pointOfContact = facilityCacheModel.pointOfContact;

		if ((pointOfContact != null) && (pointOfContact.length() == 0)) {
			facilityCacheModel.pointOfContact = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			facilityCacheModel.createDate = createDate.getTime();
		}
		else {
			facilityCacheModel.createDate = Long.MIN_VALUE;
		}

		facilityCacheModel.createdBy = getCreatedBy();

		String createdBy = facilityCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			facilityCacheModel.createdBy = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			facilityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			facilityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		facilityCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = facilityCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			facilityCacheModel.modifiedBy = null;
		}

		return facilityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Facility, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Facility, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Facility, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Facility)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Facility, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Facility, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Facility, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Facility)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Facility>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _facilityId;
	private String _name;
	private String _address;
	private String _city;
	private String _state;
	private String _zipcode;
	private long _phoneNumber;
	private String _faxNumber;
	private String _email;
	private String _pointOfContact;
	private Date _createDate;
	private String _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _modifiedBy;
	private Facility _escapedModel;

}