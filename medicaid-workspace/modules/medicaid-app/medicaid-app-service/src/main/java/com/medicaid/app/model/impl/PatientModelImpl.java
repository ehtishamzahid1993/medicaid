/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.medicaid.app.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.medicaid.app.model.Patient;
import com.medicaid.app.model.PatientModel;
import com.medicaid.app.model.PatientSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Patient service. Represents a row in the &quot;Medicaid_Patient&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PatientModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PatientImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PatientImpl
 * @generated
 */
@JSON(strict = true)
public class PatientModelImpl
	extends BaseModelImpl<Patient> implements PatientModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a patient model instance should use the <code>Patient</code> interface instead.
	 */
	public static final String TABLE_NAME = "Medicaid_Patient";

	public static final Object[][] TABLE_COLUMNS = {
		{"patientId", Types.BIGINT}, {"firstName", Types.VARCHAR},
		{"lastName", Types.VARCHAR}, {"emailAddress", Types.VARCHAR},
		{"phoneNo", Types.BIGINT}, {"dateOfBirth", Types.TIMESTAMP},
		{"admitDate", Types.TIMESTAMP}, {"admitPayer", Types.VARCHAR},
		{"medicaidNeedDate", Types.TIMESTAMP}, {"haveMedicaid", Types.BOOLEAN},
		{"residentLiabilityEmailSent", Types.BOOLEAN},
		{"address", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"zipCode", Types.VARCHAR},
		{"documentIds", Types.VARCHAR}, {"referralId", Types.BIGINT},
		{"facilityId", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"createdBy", Types.VARCHAR}, {"modifiedDate", Types.TIMESTAMP},
		{"modifiedBy", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("patientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("admitDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("admitPayer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("medicaidNeedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("haveMedicaid", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("residentLiabilityEmailSent", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentIds", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("referralId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("facilityId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Medicaid_Patient (patientId LONG not null primary key,firstName VARCHAR(75) null,lastName VARCHAR(75) null,emailAddress VARCHAR(75) null,phoneNo LONG,dateOfBirth DATE null,admitDate DATE null,admitPayer VARCHAR(75) null,medicaidNeedDate DATE null,haveMedicaid BOOLEAN,residentLiabilityEmailSent BOOLEAN,address VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,zipCode VARCHAR(75) null,documentIds VARCHAR(75) null,referralId LONG,facilityId VARCHAR(75) null,createDate DATE null,createdBy VARCHAR(75) null,modifiedDate DATE null,modifiedBy VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Medicaid_Patient";

	public static final String ORDER_BY_JPQL =
		" ORDER BY patient.patientId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Medicaid_Patient.patientId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long EMAILADDRESS_COLUMN_BITMASK = 1L;

	public static final long FIRSTNAME_COLUMN_BITMASK = 2L;

	public static final long PATIENTID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Patient toModel(PatientSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Patient model = new PatientImpl();

		model.setPatientId(soapModel.getPatientId());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setPhoneNo(soapModel.getPhoneNo());
		model.setDateOfBirth(soapModel.getDateOfBirth());
		model.setAdmitDate(soapModel.getAdmitDate());
		model.setAdmitPayer(soapModel.getAdmitPayer());
		model.setMedicaidNeedDate(soapModel.getMedicaidNeedDate());
		model.setHaveMedicaid(soapModel.isHaveMedicaid());
		model.setResidentLiabilityEmailSent(
			soapModel.isResidentLiabilityEmailSent());
		model.setAddress(soapModel.getAddress());
		model.setCity(soapModel.getCity());
		model.setState(soapModel.getState());
		model.setZipCode(soapModel.getZipCode());
		model.setDocumentIds(soapModel.getDocumentIds());
		model.setReferralId(soapModel.getReferralId());
		model.setFacilityId(soapModel.getFacilityId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setModifiedBy(soapModel.getModifiedBy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Patient> toModels(PatientSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Patient> models = new ArrayList<Patient>(soapModels.length);

		for (PatientSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PatientModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _patientId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPatientId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _patientId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Patient.class;
	}

	@Override
	public String getModelClassName() {
		return Patient.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Patient, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Patient, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Patient, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Patient)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Patient, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Patient, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Patient)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Patient, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Patient, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Patient>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Patient.class.getClassLoader(), Patient.class, ModelWrapper.class);

		try {
			Constructor<Patient> constructor =
				(Constructor<Patient>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Patient, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Patient, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Patient, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Patient, Object>>();
		Map<String, BiConsumer<Patient, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Patient, ?>>();

		attributeGetterFunctions.put("patientId", Patient::getPatientId);
		attributeSetterBiConsumers.put(
			"patientId", (BiConsumer<Patient, Long>)Patient::setPatientId);
		attributeGetterFunctions.put("firstName", Patient::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName", (BiConsumer<Patient, String>)Patient::setFirstName);
		attributeGetterFunctions.put("lastName", Patient::getLastName);
		attributeSetterBiConsumers.put(
			"lastName", (BiConsumer<Patient, String>)Patient::setLastName);
		attributeGetterFunctions.put("emailAddress", Patient::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<Patient, String>)Patient::setEmailAddress);
		attributeGetterFunctions.put("phoneNo", Patient::getPhoneNo);
		attributeSetterBiConsumers.put(
			"phoneNo", (BiConsumer<Patient, Long>)Patient::setPhoneNo);
		attributeGetterFunctions.put("dateOfBirth", Patient::getDateOfBirth);
		attributeSetterBiConsumers.put(
			"dateOfBirth", (BiConsumer<Patient, Date>)Patient::setDateOfBirth);
		attributeGetterFunctions.put("admitDate", Patient::getAdmitDate);
		attributeSetterBiConsumers.put(
			"admitDate", (BiConsumer<Patient, Date>)Patient::setAdmitDate);
		attributeGetterFunctions.put("admitPayer", Patient::getAdmitPayer);
		attributeSetterBiConsumers.put(
			"admitPayer", (BiConsumer<Patient, String>)Patient::setAdmitPayer);
		attributeGetterFunctions.put(
			"medicaidNeedDate", Patient::getMedicaidNeedDate);
		attributeSetterBiConsumers.put(
			"medicaidNeedDate",
			(BiConsumer<Patient, Date>)Patient::setMedicaidNeedDate);
		attributeGetterFunctions.put("haveMedicaid", Patient::getHaveMedicaid);
		attributeSetterBiConsumers.put(
			"haveMedicaid",
			(BiConsumer<Patient, Boolean>)Patient::setHaveMedicaid);
		attributeGetterFunctions.put(
			"residentLiabilityEmailSent",
			Patient::getResidentLiabilityEmailSent);
		attributeSetterBiConsumers.put(
			"residentLiabilityEmailSent",
			(BiConsumer<Patient, Boolean>)
				Patient::setResidentLiabilityEmailSent);
		attributeGetterFunctions.put("address", Patient::getAddress);
		attributeSetterBiConsumers.put(
			"address", (BiConsumer<Patient, String>)Patient::setAddress);
		attributeGetterFunctions.put("city", Patient::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Patient, String>)Patient::setCity);
		attributeGetterFunctions.put("state", Patient::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<Patient, String>)Patient::setState);
		attributeGetterFunctions.put("zipCode", Patient::getZipCode);
		attributeSetterBiConsumers.put(
			"zipCode", (BiConsumer<Patient, String>)Patient::setZipCode);
		attributeGetterFunctions.put("documentIds", Patient::getDocumentIds);
		attributeSetterBiConsumers.put(
			"documentIds",
			(BiConsumer<Patient, String>)Patient::setDocumentIds);
		attributeGetterFunctions.put("referralId", Patient::getReferralId);
		attributeSetterBiConsumers.put(
			"referralId", (BiConsumer<Patient, Long>)Patient::setReferralId);
		attributeGetterFunctions.put("facilityId", Patient::getFacilityId);
		attributeSetterBiConsumers.put(
			"facilityId", (BiConsumer<Patient, String>)Patient::setFacilityId);
		attributeGetterFunctions.put("createDate", Patient::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Patient, Date>)Patient::setCreateDate);
		attributeGetterFunctions.put("createdBy", Patient::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy", (BiConsumer<Patient, String>)Patient::setCreatedBy);
		attributeGetterFunctions.put("modifiedDate", Patient::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Patient, Date>)Patient::setModifiedDate);
		attributeGetterFunctions.put("modifiedBy", Patient::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy", (BiConsumer<Patient, String>)Patient::setModifiedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getPatientId() {
		return _patientId;
	}

	@Override
	public void setPatientId(long patientId) {
		_patientId = patientId;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_columnBitmask |= FIRSTNAME_COLUMN_BITMASK;

		if (_originalFirstName == null) {
			_originalFirstName = _firstName;
		}

		_firstName = firstName;
	}

	public String getOriginalFirstName() {
		return GetterUtil.getString(_originalFirstName);
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_columnBitmask |= EMAILADDRESS_COLUMN_BITMASK;

		if (_originalEmailAddress == null) {
			_originalEmailAddress = _emailAddress;
		}

		_emailAddress = emailAddress;
	}

	public String getOriginalEmailAddress() {
		return GetterUtil.getString(_originalEmailAddress);
	}

	@JSON
	@Override
	public long getPhoneNo() {
		return _phoneNo;
	}

	@Override
	public void setPhoneNo(long phoneNo) {
		_phoneNo = phoneNo;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		_dateOfBirth = dateOfBirth;
	}

	@JSON
	@Override
	public Date getAdmitDate() {
		return _admitDate;
	}

	@Override
	public void setAdmitDate(Date admitDate) {
		_admitDate = admitDate;
	}

	@JSON
	@Override
	public String getAdmitPayer() {
		if (_admitPayer == null) {
			return "";
		}
		else {
			return _admitPayer;
		}
	}

	@Override
	public void setAdmitPayer(String admitPayer) {
		_admitPayer = admitPayer;
	}

	@JSON
	@Override
	public Date getMedicaidNeedDate() {
		return _medicaidNeedDate;
	}

	@Override
	public void setMedicaidNeedDate(Date medicaidNeedDate) {
		_medicaidNeedDate = medicaidNeedDate;
	}

	@JSON
	@Override
	public boolean getHaveMedicaid() {
		return _haveMedicaid;
	}

	@JSON
	@Override
	public boolean isHaveMedicaid() {
		return _haveMedicaid;
	}

	@Override
	public void setHaveMedicaid(boolean haveMedicaid) {
		_haveMedicaid = haveMedicaid;
	}

	@JSON
	@Override
	public boolean getResidentLiabilityEmailSent() {
		return _residentLiabilityEmailSent;
	}

	@JSON
	@Override
	public boolean isResidentLiabilityEmailSent() {
		return _residentLiabilityEmailSent;
	}

	@Override
	public void setResidentLiabilityEmailSent(
		boolean residentLiabilityEmailSent) {

		_residentLiabilityEmailSent = residentLiabilityEmailSent;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@JSON
	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return "";
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		_zipCode = zipCode;
	}

	@JSON
	@Override
	public String getDocumentIds() {
		if (_documentIds == null) {
			return "";
		}
		else {
			return _documentIds;
		}
	}

	@Override
	public void setDocumentIds(String documentIds) {
		_documentIds = documentIds;
	}

	@JSON
	@Override
	public Long getReferralId() {
		return _referralId;
	}

	@Override
	public void setReferralId(Long referralId) {
		_referralId = referralId;
	}

	@JSON
	@Override
	public String getFacilityId() {
		if (_facilityId == null) {
			return "";
		}
		else {
			return _facilityId;
		}
	}

	@Override
	public void setFacilityId(String facilityId) {
		_facilityId = facilityId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return "";
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Patient.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Patient toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Patient>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PatientImpl patientImpl = new PatientImpl();

		patientImpl.setPatientId(getPatientId());
		patientImpl.setFirstName(getFirstName());
		patientImpl.setLastName(getLastName());
		patientImpl.setEmailAddress(getEmailAddress());
		patientImpl.setPhoneNo(getPhoneNo());
		patientImpl.setDateOfBirth(getDateOfBirth());
		patientImpl.setAdmitDate(getAdmitDate());
		patientImpl.setAdmitPayer(getAdmitPayer());
		patientImpl.setMedicaidNeedDate(getMedicaidNeedDate());
		patientImpl.setHaveMedicaid(isHaveMedicaid());
		patientImpl.setResidentLiabilityEmailSent(
			isResidentLiabilityEmailSent());
		patientImpl.setAddress(getAddress());
		patientImpl.setCity(getCity());
		patientImpl.setState(getState());
		patientImpl.setZipCode(getZipCode());
		patientImpl.setDocumentIds(getDocumentIds());
		patientImpl.setReferralId(getReferralId());
		patientImpl.setFacilityId(getFacilityId());
		patientImpl.setCreateDate(getCreateDate());
		patientImpl.setCreatedBy(getCreatedBy());
		patientImpl.setModifiedDate(getModifiedDate());
		patientImpl.setModifiedBy(getModifiedBy());

		patientImpl.resetOriginalValues();

		return patientImpl;
	}

	@Override
	public int compareTo(Patient patient) {
		long primaryKey = patient.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Patient)) {
			return false;
		}

		Patient patient = (Patient)obj;

		long primaryKey = patient.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		PatientModelImpl patientModelImpl = this;

		patientModelImpl._originalFirstName = patientModelImpl._firstName;

		patientModelImpl._originalEmailAddress = patientModelImpl._emailAddress;

		patientModelImpl._setModifiedDate = false;

		patientModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Patient> toCacheModel() {
		PatientCacheModel patientCacheModel = new PatientCacheModel();

		patientCacheModel.patientId = getPatientId();

		patientCacheModel.firstName = getFirstName();

		String firstName = patientCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			patientCacheModel.firstName = null;
		}

		patientCacheModel.lastName = getLastName();

		String lastName = patientCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			patientCacheModel.lastName = null;
		}

		patientCacheModel.emailAddress = getEmailAddress();

		String emailAddress = patientCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			patientCacheModel.emailAddress = null;
		}

		patientCacheModel.phoneNo = getPhoneNo();

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			patientCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			patientCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		Date admitDate = getAdmitDate();

		if (admitDate != null) {
			patientCacheModel.admitDate = admitDate.getTime();
		}
		else {
			patientCacheModel.admitDate = Long.MIN_VALUE;
		}

		patientCacheModel.admitPayer = getAdmitPayer();

		String admitPayer = patientCacheModel.admitPayer;

		if ((admitPayer != null) && (admitPayer.length() == 0)) {
			patientCacheModel.admitPayer = null;
		}

		Date medicaidNeedDate = getMedicaidNeedDate();

		if (medicaidNeedDate != null) {
			patientCacheModel.medicaidNeedDate = medicaidNeedDate.getTime();
		}
		else {
			patientCacheModel.medicaidNeedDate = Long.MIN_VALUE;
		}

		patientCacheModel.haveMedicaid = isHaveMedicaid();

		patientCacheModel.residentLiabilityEmailSent =
			isResidentLiabilityEmailSent();

		patientCacheModel.address = getAddress();

		String address = patientCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			patientCacheModel.address = null;
		}

		patientCacheModel.city = getCity();

		String city = patientCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			patientCacheModel.city = null;
		}

		patientCacheModel.state = getState();

		String state = patientCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			patientCacheModel.state = null;
		}

		patientCacheModel.zipCode = getZipCode();

		String zipCode = patientCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			patientCacheModel.zipCode = null;
		}

		patientCacheModel.documentIds = getDocumentIds();

		String documentIds = patientCacheModel.documentIds;

		if ((documentIds != null) && (documentIds.length() == 0)) {
			patientCacheModel.documentIds = null;
		}

		patientCacheModel.referralId = getReferralId();

		patientCacheModel.facilityId = getFacilityId();

		String facilityId = patientCacheModel.facilityId;

		if ((facilityId != null) && (facilityId.length() == 0)) {
			patientCacheModel.facilityId = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			patientCacheModel.createDate = createDate.getTime();
		}
		else {
			patientCacheModel.createDate = Long.MIN_VALUE;
		}

		patientCacheModel.createdBy = getCreatedBy();

		String createdBy = patientCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			patientCacheModel.createdBy = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			patientCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			patientCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		patientCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = patientCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			patientCacheModel.modifiedBy = null;
		}

		return patientCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Patient, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Patient, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Patient, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Patient)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Patient, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Patient, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Patient, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Patient)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Patient>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _patientId;
	private String _firstName;
	private String _originalFirstName;
	private String _lastName;
	private String _emailAddress;
	private String _originalEmailAddress;
	private long _phoneNo;
	private Date _dateOfBirth;
	private Date _admitDate;
	private String _admitPayer;
	private Date _medicaidNeedDate;
	private boolean _haveMedicaid;
	private boolean _residentLiabilityEmailSent;
	private String _address;
	private String _city;
	private String _state;
	private String _zipCode;
	private String _documentIds;
	private Long _referralId;
	private String _facilityId;
	private Date _createDate;
	private String _createdBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _modifiedBy;
	private long _columnBitmask;
	private Patient _escapedModel;

}