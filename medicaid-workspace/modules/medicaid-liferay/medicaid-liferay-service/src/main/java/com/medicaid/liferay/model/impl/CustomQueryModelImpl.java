/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.medicaid.liferay.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.medicaid.liferay.model.CustomQuery;
import com.medicaid.liferay.model.CustomQueryModel;
import com.medicaid.liferay.model.CustomQuerySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CustomQuery service. Represents a row in the &quot;Medicaid_CustomQuery&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CustomQueryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomQueryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustomQueryImpl
 * @generated
 */
@JSON(strict = true)
public class CustomQueryModelImpl
	extends BaseModelImpl<CustomQuery> implements CustomQueryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a custom query model instance should use the <code>CustomQuery</code> interface instead.
	 */
	public static final String TABLE_NAME = "Medicaid_CustomQuery";

	public static final Object[][] TABLE_COLUMNS = {
		{"sqlKey", Types.VARCHAR}, {"sqlQuery", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("sqlKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sqlQuery", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Medicaid_CustomQuery (sqlKey VARCHAR(75) not null primary key,sqlQuery VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Medicaid_CustomQuery";

	public static final String ORDER_BY_JPQL =
		" ORDER BY customQuery.sqlKey ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Medicaid_CustomQuery.sqlKey ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CustomQuery toModel(CustomQuerySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CustomQuery model = new CustomQueryImpl();

		model.setSqlKey(soapModel.getSqlKey());
		model.setSqlQuery(soapModel.getSqlQuery());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CustomQuery> toModels(CustomQuerySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CustomQuery> models = new ArrayList<CustomQuery>(
			soapModels.length);

		for (CustomQuerySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CustomQueryModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _sqlKey;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setSqlKey(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sqlKey;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return CustomQuery.class;
	}

	@Override
	public String getModelClassName() {
		return CustomQuery.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CustomQuery, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CustomQuery, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomQuery, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CustomQuery)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CustomQuery, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CustomQuery, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CustomQuery)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CustomQuery, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CustomQuery, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CustomQuery>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CustomQuery.class.getClassLoader(), CustomQuery.class,
			ModelWrapper.class);

		try {
			Constructor<CustomQuery> constructor =
				(Constructor<CustomQuery>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<CustomQuery, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CustomQuery, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CustomQuery, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CustomQuery, Object>>();
		Map<String, BiConsumer<CustomQuery, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CustomQuery, ?>>();

		attributeGetterFunctions.put("sqlKey", CustomQuery::getSqlKey);
		attributeSetterBiConsumers.put(
			"sqlKey", (BiConsumer<CustomQuery, String>)CustomQuery::setSqlKey);
		attributeGetterFunctions.put("sqlQuery", CustomQuery::getSqlQuery);
		attributeSetterBiConsumers.put(
			"sqlQuery",
			(BiConsumer<CustomQuery, String>)CustomQuery::setSqlQuery);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getSqlKey() {
		if (_sqlKey == null) {
			return "";
		}
		else {
			return _sqlKey;
		}
	}

	@Override
	public void setSqlKey(String sqlKey) {
		_sqlKey = sqlKey;
	}

	@JSON
	@Override
	public String getSqlQuery() {
		if (_sqlQuery == null) {
			return "";
		}
		else {
			return _sqlQuery;
		}
	}

	@Override
	public void setSqlQuery(String sqlQuery) {
		_sqlQuery = sqlQuery;
	}

	@Override
	public CustomQuery toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CustomQuery>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomQueryImpl customQueryImpl = new CustomQueryImpl();

		customQueryImpl.setSqlKey(getSqlKey());
		customQueryImpl.setSqlQuery(getSqlQuery());

		customQueryImpl.resetOriginalValues();

		return customQueryImpl;
	}

	@Override
	public int compareTo(CustomQuery customQuery) {
		String primaryKey = customQuery.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CustomQuery)) {
			return false;
		}

		CustomQuery customQuery = (CustomQuery)obj;

		String primaryKey = customQuery.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CustomQuery> toCacheModel() {
		CustomQueryCacheModel customQueryCacheModel =
			new CustomQueryCacheModel();

		customQueryCacheModel.sqlKey = getSqlKey();

		String sqlKey = customQueryCacheModel.sqlKey;

		if ((sqlKey != null) && (sqlKey.length() == 0)) {
			customQueryCacheModel.sqlKey = null;
		}

		customQueryCacheModel.sqlQuery = getSqlQuery();

		String sqlQuery = customQueryCacheModel.sqlQuery;

		if ((sqlQuery != null) && (sqlQuery.length() == 0)) {
			customQueryCacheModel.sqlQuery = null;
		}

		return customQueryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CustomQuery, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CustomQuery, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomQuery, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CustomQuery)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CustomQuery, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CustomQuery, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CustomQuery, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CustomQuery)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CustomQuery>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _sqlKey;
	private String _sqlQuery;
	private CustomQuery _escapedModel;

}